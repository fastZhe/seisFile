
group = 'edu.sc.seis'
version = '1.0.0'

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'groovy'

repositories {
    maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    mavenLocal()
    mavenCentral()
}

dependencies {
//    compile project(':seedCodec')
    compile "edu.sc.seis:seedCodec:1.0.11"
    compile "com.martiansoftware:jsap:2.1"
    compile "org.slf4j:slf4j-api:1.7.21"
    compile group: "org.slf4j", name: "slf4j-log4j12", version: "1.7.21"
    compile "com.google.guava:guava:23.0"
//
//    compile 'org.rxtx:rxtx:2.2.pre2'  ...but not in maven
    compile 'org.rxtx:rxtx:2.1.7'
    compile "org.codehaus.woodstox:woodstox-core-lgpl:4.4.1"
    compile "net.java.dev.msv:msv-core:2013.6.1"
    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    runtime "mysql:mysql-connector-java:5.1.39"
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

sourceSets {
   example {
      java {
         compileClasspath += main.output
         compileClasspath += main.compileClasspath
         runtimeClasspath += main.output
         runtimeClasspath += main.runtimeClasspath
      }
   }
   metacode {
      groovy {
         srcDir 'src/metacode/groovy'
      }
   }
}




uploadArchives {
    repositories {
        mavenDeployer {
            mavenLocal()
        }
    }
}


//signing {
//    sign configurations.archives
//}

//uploadArchives {
//  repositories {
//    mavenDeployer {
//      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//        authentication(userName: ossrhUsername, password: ossrhPassword)
//      }
//
//      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//        authentication(userName: ossrhUsername, password: ossrhPassword)
//      }
//
//      pom.project {
//        name 'seisFile'
//        packaging 'jar'
//        // optionally artifactId can be defined here
//        description 'A library for reading and writing seismic file formats in java.'
//        url 'http://www.seis.sc.edu/seisFile.html'
//
//        scm {
//          connection 'scm:git:https://github.com/crotwell/seisFile.git'
//          developerConnection 'scm:git:https://github.com/crotwell/seisFile.git'
//          url 'https://github.com/crotwell/seisFile'
//        }
//
//        licenses {
//          license {
//            name 'The GNU General Public License, Version 3'
//            url 'http://www.gnu.org/licenses/gpl-3.0.html'
//          }
//        }
//
//        developers {
//          developer {
//            id 'crotwell'
//            name 'Philip Crotwell'
//            email 'crotwell@seis.sc.edu'
//          }
//        }
//      }
//    }
//  }
//}


def binDistFiles = copySpec {
    from('build/output') {
        fileMode=0755
        include('bin/**')
    }
    from('build/output') {
        include('lib/**')
    }
}

def distFiles = copySpec {
    with(binDistFiles)
    from('build/docs') {
        include('javadoc/**')
    }
    from('build') {
        include('build.gradle')
        include('settings.gradle')
    }
    from('.') {
        include('gpl-3.0.txt')
        include('doc/**')
        include('src/**')
        include('gradle/**')
        include('gradlew')
        include('gradlew.bat')
        exclude('**/*.svn')
    }
    from('.') {
        fileMode=0755
        include('gradlew')
    }
    from('../seiswww/build/site') {
        include('seisFile.html')
    }
    from('build/generated-src/modVersion') {
        include('java/**')
        into('src/main')
    }
}


task explodeBin(type: Sync, dependsOn: ['makeScript', 'exampleClasses' ]) {
    group = 'dist'
    with binDistFiles
    into file("$buildDir/explode")
}

task explodeDist(type: Sync, dependsOn: ['explodeBin', 'javadoc', 'modVersionClass', 'createBuildScript', ':seiswww:makeSite', 'wrapper']) {
    group = 'dist'
    with distFiles
    into file("$buildDir/explode")
}

task tarBin(type: Tar, dependsOn: ['explodeBin' ]) {
    def dirName = project.name+'-'+version+'-bin'
    compression = Compression.GZIP
    into(dirName) {
        with binDistFiles
    }
}

task tarDist(type: Tar, dependsOn: ['explodeDist' ]) {
    def dirName = project.name+'-'+version
    compression = Compression.GZIP
    into(dirName) {
        with distFiles
    }
}

task exampleJar(type: Jar, dependsOn: ['exampleClasses' ]) {
    from sourceSets.example.output
    baseName = 'seisFileExample'
}
explodeBin.dependsOn(exampleJar)
artifacts {
    exampleJar
}

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
}


task makeScript(dependsOn: copyToLib) << { task ->
    group = 'build'
    def dExtras = getDExtras()
    def doBat = true
    ScriptBuilder.create('fdsnevent', 'edu.sc.seis.seisFile.fdsnws.EventClient', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('fdsnstationxml', 'edu.sc.seis.seisFile.fdsnws.stationxml.FDSNStationXML', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('fdsnstation', 'edu.sc.seis.seisFile.fdsnws.StationClient', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('fdsndataselect', 'edu.sc.seis.seisFile.fdsnws.DataSelectClient', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('saclh', 'edu.sc.seis.seisFile.sac.ListHeader', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('mseedlh', 'edu.sc.seis.seisFile.mseed.ListHeader', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('seedlinkclient', 'edu.sc.seis.seisFile.seedlink.Client', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('cwbclient', 'edu.sc.seis.seisFile.usgsCWB.Client', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('lissclient', 'edu.sc.seis.seisFile.liss.Client', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('winstonclient', 'edu.sc.seis.seisFile.winston.WinstonClient', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('winstonexport', 'edu.sc.seis.seisFile.winston.WinstonExport', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('earthwormExportTest', 'edu.sc.seis.seisFile.earthworm.EarthwormExport', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('earthwormImportTest', 'edu.sc.seis.seisFile.earthworm.EarthwormImport', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('waveserverclient', 'edu.sc.seis.seisFile.waveserver.WaveServerClient', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('syncfilecompare', 'edu.sc.seis.seisFile.syncFile.SyncFileCompare', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('syncfile2gmt', 'edu.sc.seis.seisFile.syncFile.GMTSyncFile', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('refinesyncfile', 'edu.sc.seis.seisFile.syncFile.RefineSyncFile', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('gcfserialtoew', 'edu.sc.seis.seisFile.gcf.GCFEarthwormExport', task.project, dExtras:dExtras, bat:doBat)
    //ScriptBuilder.create('fakegcfserial', 'edu.sc.seis.seisFile.gcf.GCFSerialOutput', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('sfgroovy', 'groovy.lang.GroovyShell', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('winstonpurge', 'edu.sc.seis.seisFile.winston.PurgeOldData', task.project, dExtras:dExtras, bat:doBat)
}

def getDExtras() {
    return [ 'seisFile':getVersion()]
}



